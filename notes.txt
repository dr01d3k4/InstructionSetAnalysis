Compiled in GCC with -Wall option using Code::Blocks IDE

C code:

#include <stdio.h>
#include <stdlib.h>


int main() {
	printf("Hello world!\n");
	return 0;
}

Output dissassembly in Code::Blocks

0x40052d	push   rbp
0x40052e	mov    rbp,rsp
0x400531	mov    edi,0x4005d4
0x400536	call   0x400410 <puts@plt>
0x40053b	mov    eax,0x0
0x400540	pop    rbp
0x400541	ret

Object file in HelloWorld/obj/Debug/main.o



main.o:     file format elf64-x86-64


https://0xax.gitbooks.io/linux-insides/content/Theory/ELF.html



http://pygments.org/docs/lexers/#lexers-for-hexadecimal-dumps



To find text section:
- Read elf64 header
- e_shoff, e_shnum and e_shentsize attributes to get location, amount and size for section header
- e_shstrndx to get index in section header table for string table section header
	e_shoff + (e_shentsize * e_shstrndx)
- sh_offset to get file location for section name string table
- for each section header, look at sh_name offset from start of string table section header
- if it matches .text then found .text section header
- sh_offset for this section header gets the text section in the file






.text section starts at 0x40
00000040    55 48 89 e5 bf 00 00 00 00 e8 00 00 00 00 b8 00    |UH..............|
00000050    00 00 00 5d c3				       |...].

.data section starts at 0x55?
00000050    .. .. .. .. .. 48 65 6c 6c 6f 20 77 6f 72 6c 64    |...].Hello world|
00000060    21						       |!


section name string table starts at 0x37a ?

00000370    .. .. .. .. .. .. .. .. .. .. 73 79 6d 74 61 62    |.P........symtab|
00000380    00 2e 73 74 72 74 61 62 00 2e 73 68 73 74 72 74    |..strtab..shstrt|
00000390    61 62 00 2e 72 65 6c 61 2e 74 65 78 74 00 2e 64    |ab..rela.text..d|
000003a0    61 74 61 00 2e 62 73 73 00 2e 72 6f 64 61 74 61    |ata..bss..rodata|
000003b0    00 2e 72 65 6c 61 2e 64 65 62 75 67 5f 69 6e 66    |..rela.debug_inf|
000003c0    6f 00 2e 64 65 62 75 67 5f 61 62 62 72 65 76 00    |o..debug_abbrev.|
000003d0    2e 72 65 6c 61 2e 64 65 62 75 67 5f 61 72 61 6e    |.rela.debug_aran|
000003e0    67 65 73 00 2e 72 65 6c 61 2e 64 65 62 75 67 5f    |ges..rela.debug_|
000003f0    6c 69 6e 65 00 2e 64 65 62 75 67 5f 73 74 72 00    |line..debug_str.|
00000400    2e 63 6f 6d 6d 65 6e 74 00 2e 6e 6f 74 65 2e 47    |.comment..note.G|
00000410    4e 55 2d 73 74 61 63 6b 00 2e 72 65 6c 61 2e 65    |NU-stack..rela.e|
00000420    68 5f 66 72 61 6d 65 00 00 00 00 00 00 00 00 00    |h_frame 

Questions:
- Does compiling in debug mode or release mode affect results?















http://dl.acm.org/citation.cfm?id=808199 (1984)
Table 1:
- At first glance, thought CALL/RET was oddly low. Read the paragraph about it:
	"Note that VAX subroutine linkage is quite simple, involving only a push or pop of the PC together with a jump; procedure linkage ,s more complex, involving considerable state saving and restoring on the stack"
	That explains why CALL/RET is low but subroutine call and return are actually high in SIMPLE
- Bitwise and floating point also seem low
	- Depends on what the compiled software is
		- Office software probably doesn't use them as much
		- Games would use them a lot, unless they do these calculations on the GPU or with SIMD
- "PC-changing instructions are quite common, accounting for almost 40 percent of all instructions ..."

- "Register mode is the most common addressing mode, especially in specifiers after the first. Since the last specifier is generally the destination of the instruction's result (if not a branch), this probably reflects a tendency to store results in registers."
	- As registers are faster than RAM, it makes sense to keep values in registers as long as possible
	- So registers being the result-storing operand to an instruction makes sense
	- Especially with compiler optimisations, do lots of work to the value in a register, then move it back to RAM to save the reads/writes

- Difference between short literal and immediate? Why is short literal 5~ times more common?

http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/addressMode.html

http://renesasrulz.com/doctor_micro/rx_blog/b/weblog/archive/2012/12/06/cisc-and-risc-debate-continues-hybrid-wins.aspx

http://stackoverflow.com/questions/13071221/is-x86-risc-or-cisc
http://cs.stanford.edu/people/eroberts/courses/soco/projects/risc/risccisc/
	- CISC has more complicated addressing modes
		- Means fewer instructions
		- But instructions may take more cycles to complete
	- RISC favors separate load and store instructions
		- Means only needs 2 addressing modes (literal and register)
		- Each instruction can be done in fewer cycles
		- But more instructions


Hennessy and Patterson
	- Figure A.13



http://www.c-jump.com/CIS77/CPU/x86/X77_0030_encoding_format.htm
http://wiki.osdev.org/X86-64_Instruction_Encoding
http://www.codeproject.com/Articles/662301/x-Instruction-Encoding-Revealed-Bit-Twiddling-fo

Registers:
https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#General-Purpose_Registers_.28GPR.29_-_16-bit_naming_conventions