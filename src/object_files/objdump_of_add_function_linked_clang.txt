ben@ben-XPS-L701X:~/Documents/InstructionSetAnalysis/src/object_files$ objdump -d -M intel add_function_linked_clang.out 

add_function_linked_clang.out:     file format elf64-x86-64


Disassembly of section .init:

00000000004003e0 <_init>:
  4003e0:	48 83 ec 08          	sub    rsp,0x8
  4003e4:	48 8b 05 0d 0c 20 00 	mov    rax,QWORD PTR [rip+0x200c0d]        # 600ff8 <_DYNAMIC+0x1d0>
  4003eb:	48 85 c0             	test   rax,rax
  4003ee:	74 05                	je     4003f5 <_init+0x15>
  4003f0:	e8 3b 00 00 00       	call   400430 <__gmon_start__@plt>
  4003f5:	48 83 c4 08          	add    rsp,0x8
  4003f9:	c3                   	ret    

Disassembly of section .plt:

0000000000400400 <printf@plt-0x10>:
  400400:	ff 35 02 0c 20 00    	push   QWORD PTR [rip+0x200c02]        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400406:	ff 25 04 0c 20 00    	jmp    QWORD PTR [rip+0x200c04]        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40040c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000400410 <printf@plt>:
  400410:	ff 25 02 0c 20 00    	jmp    QWORD PTR [rip+0x200c02]        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400416:	68 00 00 00 00       	push   0x0
  40041b:	e9 e0 ff ff ff       	jmp    400400 <_init+0x20>

0000000000400420 <__libc_start_main@plt>:
  400420:	ff 25 fa 0b 20 00    	jmp    QWORD PTR [rip+0x200bfa]        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400426:	68 01 00 00 00       	push   0x1
  40042b:	e9 d0 ff ff ff       	jmp    400400 <_init+0x20>

0000000000400430 <__gmon_start__@plt>:
  400430:	ff 25 f2 0b 20 00    	jmp    QWORD PTR [rip+0x200bf2]        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400436:	68 02 00 00 00       	push   0x2
  40043b:	e9 c0 ff ff ff       	jmp    400400 <_init+0x20>

Disassembly of section .text:

0000000000400440 <_start>:
  400440:	31 ed                	xor    ebp,ebp
  400442:	49 89 d1             	mov    r9,rdx
  400445:	5e                   	pop    rsi
  400446:	48 89 e2             	mov    rdx,rsp
  400449:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
  40044d:	50                   	push   rax
  40044e:	54                   	push   rsp
  40044f:	49 c7 c0 30 06 40 00 	mov    r8,0x400630
  400456:	48 c7 c1 c0 05 40 00 	mov    rcx,0x4005c0
  40045d:	48 c7 c7 30 05 40 00 	mov    rdi,0x400530
  400464:	e8 b7 ff ff ff       	call   400420 <__libc_start_main@plt>
  400469:	f4                   	hlt    
  40046a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000400470 <deregister_tm_clones>:
  400470:	b8 47 10 60 00       	mov    eax,0x601047
  400475:	55                   	push   rbp
  400476:	48 2d 40 10 60 00    	sub    rax,0x601040
  40047c:	48 83 f8 0e          	cmp    rax,0xe
  400480:	48 89 e5             	mov    rbp,rsp
  400483:	77 02                	ja     400487 <deregister_tm_clones+0x17>
  400485:	5d                   	pop    rbp
  400486:	c3                   	ret    
  400487:	b8 00 00 00 00       	mov    eax,0x0
  40048c:	48 85 c0             	test   rax,rax
  40048f:	74 f4                	je     400485 <deregister_tm_clones+0x15>
  400491:	5d                   	pop    rbp
  400492:	bf 40 10 60 00       	mov    edi,0x601040
  400497:	ff e0                	jmp    rax
  400499:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000004004a0 <register_tm_clones>:
  4004a0:	b8 40 10 60 00       	mov    eax,0x601040
  4004a5:	55                   	push   rbp
  4004a6:	48 2d 40 10 60 00    	sub    rax,0x601040
  4004ac:	48 c1 f8 03          	sar    rax,0x3
  4004b0:	48 89 e5             	mov    rbp,rsp
  4004b3:	48 89 c2             	mov    rdx,rax
  4004b6:	48 c1 ea 3f          	shr    rdx,0x3f
  4004ba:	48 01 d0             	add    rax,rdx
  4004bd:	48 d1 f8             	sar    rax,1
  4004c0:	75 02                	jne    4004c4 <register_tm_clones+0x24>
  4004c2:	5d                   	pop    rbp
  4004c3:	c3                   	ret    
  4004c4:	ba 00 00 00 00       	mov    edx,0x0
  4004c9:	48 85 d2             	test   rdx,rdx
  4004cc:	74 f4                	je     4004c2 <register_tm_clones+0x22>
  4004ce:	5d                   	pop    rbp
  4004cf:	48 89 c6             	mov    rsi,rax
  4004d2:	bf 40 10 60 00       	mov    edi,0x601040
  4004d7:	ff e2                	jmp    rdx
  4004d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000004004e0 <__do_global_dtors_aux>:
  4004e0:	80 3d 59 0b 20 00 00 	cmp    BYTE PTR [rip+0x200b59],0x0        # 601040 <__TMC_END__>
  4004e7:	75 11                	jne    4004fa <__do_global_dtors_aux+0x1a>
  4004e9:	55                   	push   rbp
  4004ea:	48 89 e5             	mov    rbp,rsp
  4004ed:	e8 7e ff ff ff       	call   400470 <deregister_tm_clones>
  4004f2:	5d                   	pop    rbp
  4004f3:	c6 05 46 0b 20 00 01 	mov    BYTE PTR [rip+0x200b46],0x1        # 601040 <__TMC_END__>
  4004fa:	f3 c3                	repz ret 
  4004fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000400500 <frame_dummy>:
  400500:	48 83 3d 18 09 20 00 	cmp    QWORD PTR [rip+0x200918],0x0        # 600e20 <__JCR_END__>
  400507:	00 
  400508:	74 1e                	je     400528 <frame_dummy+0x28>
  40050a:	b8 00 00 00 00       	mov    eax,0x0
  40050f:	48 85 c0             	test   rax,rax
  400512:	74 14                	je     400528 <frame_dummy+0x28>
  400514:	55                   	push   rbp
  400515:	bf 20 0e 60 00       	mov    edi,0x600e20
  40051a:	48 89 e5             	mov    rbp,rsp
  40051d:	ff d0                	call   rax
  40051f:	5d                   	pop    rbp
  400520:	e9 7b ff ff ff       	jmp    4004a0 <register_tm_clones>
  400525:	0f 1f 00             	nop    DWORD PTR [rax]
  400528:	e9 73 ff ff ff       	jmp    4004a0 <register_tm_clones>
  40052d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000400530 <main>:
  400530:	55                   	push   rbp
  400531:	48 89 e5             	mov    rbp,rsp
  400534:	48 83 ec 20          	sub    rsp,0x20
  400538:	48 bf 44 06 40 00 00 	movabs rdi,0x400644
  40053f:	00 00 00 
  400542:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  400549:	b0 00                	mov    al,0x0
  40054b:	e8 c0 fe ff ff       	call   400410 <printf@plt>
  400550:	c7 45 f8 05 00 00 00 	mov    DWORD PTR [rbp-0x8],0x5
  400557:	c7 45 f4 07 00 00 00 	mov    DWORD PTR [rbp-0xc],0x7
  40055e:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
  400561:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
  400564:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  400567:	e8 34 00 00 00       	call   4005a0 <add>
  40056c:	48 bf 52 06 40 00 00 	movabs rdi,0x400652
  400573:	00 00 00 
  400576:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
  400579:	8b 75 f0             	mov    esi,DWORD PTR [rbp-0x10]
  40057c:	b0 00                	mov    al,0x0
  40057e:	e8 8d fe ff ff       	call   400410 <printf@plt>
  400583:	be 00 00 00 00       	mov    esi,0x0
  400588:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
  40058b:	89 f0                	mov    eax,esi
  40058d:	48 83 c4 20          	add    rsp,0x20
  400591:	5d                   	pop    rbp
  400592:	c3                   	ret    
  400593:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nop WORD PTR cs:[rax+rax*1+0x0]
  40059a:	84 00 00 00 00 00 

00000000004005a0 <add>:
  4005a0:	55                   	push   rbp
  4005a1:	48 89 e5             	mov    rbp,rsp
  4005a4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  4005a7:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  4005aa:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
  4005ad:	03 75 f8             	add    esi,DWORD PTR [rbp-0x8]
  4005b0:	89 f0                	mov    eax,esi
  4005b2:	5d                   	pop    rbp
  4005b3:	c3                   	ret    
  4005b4:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4005bb:	00 00 00 
  4005be:	66 90                	xchg   ax,ax

00000000004005c0 <__libc_csu_init>:
  4005c0:	41 57                	push   r15
  4005c2:	41 89 ff             	mov    r15d,edi
  4005c5:	41 56                	push   r14
  4005c7:	49 89 f6             	mov    r14,rsi
  4005ca:	41 55                	push   r13
  4005cc:	49 89 d5             	mov    r13,rdx
  4005cf:	41 54                	push   r12
  4005d1:	4c 8d 25 38 08 20 00 	lea    r12,[rip+0x200838]        # 600e10 <__frame_dummy_init_array_entry>
  4005d8:	55                   	push   rbp
  4005d9:	48 8d 2d 38 08 20 00 	lea    rbp,[rip+0x200838]        # 600e18 <__init_array_end>
  4005e0:	53                   	push   rbx
  4005e1:	4c 29 e5             	sub    rbp,r12
  4005e4:	31 db                	xor    ebx,ebx
  4005e6:	48 c1 fd 03          	sar    rbp,0x3
  4005ea:	48 83 ec 08          	sub    rsp,0x8
  4005ee:	e8 ed fd ff ff       	call   4003e0 <_init>
  4005f3:	48 85 ed             	test   rbp,rbp
  4005f6:	74 1e                	je     400616 <__libc_csu_init+0x56>
  4005f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4005ff:	00 
  400600:	4c 89 ea             	mov    rdx,r13
  400603:	4c 89 f6             	mov    rsi,r14
  400606:	44 89 ff             	mov    edi,r15d
  400609:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
  40060d:	48 83 c3 01          	add    rbx,0x1
  400611:	48 39 eb             	cmp    rbx,rbp
  400614:	75 ea                	jne    400600 <__libc_csu_init+0x40>
  400616:	48 83 c4 08          	add    rsp,0x8
  40061a:	5b                   	pop    rbx
  40061b:	5d                   	pop    rbp
  40061c:	41 5c                	pop    r12
  40061e:	41 5d                	pop    r13
  400620:	41 5e                	pop    r14
  400622:	41 5f                	pop    r15
  400624:	c3                   	ret    
  400625:	66 66 2e 0f 1f 84 00 	data32 nop WORD PTR cs:[rax+rax*1+0x0]
  40062c:	00 00 00 00 

0000000000400630 <__libc_csu_fini>:
  400630:	f3 c3                	repz ret 

Disassembly of section .fini:

0000000000400634 <_fini>:
  400634:	48 83 ec 08          	sub    rsp,0x8
  400638:	48 83 c4 08          	add    rsp,0x8
  40063c:	c3                   	ret


Calculating stats
Filename:    object_files/add_function_linked_clang.out
Architecture:    x86
Compiler:    clang
Total instructions:  143

Opcode types
   0 transfer
   1 arithmetic
   2 logic
   3 misc
   4 jump

Total unique opcodes 500
Total actual opcodes by type
   0 transfer    100
   1 arithmetic    100
   2 logic   100
   3 misc    100
   4 jump    100

Operand types
   0 immediate
   1 register
   2 [register]
   3 [immediate]
   4 [register + immediate]
   5 [register * scale]
   6 [register + register * scale]
   7 [register * scale + immediate]
   8 [register + register * scale + immediate]

Data directions
   0 no operands
   1 imm
   2 reg
   3 mem
   4 imm -> reg
   5 imm -> mem
   6 reg -> reg
   7 reg -> mem
   8 mem -> reg
   9 mem -> mem

Total opcodes: 143
Counts
  0 transfer   = 76
  1 arithmetic = 22
  2 logic      = 3
  3 misc       = 14
  4 jump       = 28

Percentages
  0 transfer   =  53.15%
  1 arithmetic =  15.38%
  2 logic      =   2.10%
  3 misc       =   9.79%
  4 jump       =  19.58%

Total unique opcodes 38
Counts
  0 transfer   = {Opcode(opcode = 0x58, name = pop, type = transfer) = 14, Opcode(opcode = 0x89, name = mov, type = transfer) = 22, Opcode(opcode = 0x50, name = push, type = transfer) = 13, Opcode(opcode = 0xc6, extension = 0x0, name = mov, type = transfer) = 0, Opcode(opcode = 0x8b, name = mov, type = transfer) = 3, Opcode(opcode = 0xb8, name = mov, type = transfer) = 10, Opcode(opcode = 0xc7, extension = 0x0, name = mov, type = transfer) = 5, Opcode(opcode = 0xb0, name = mov, type = transfer) = 1, }
  1 arithmetic = {Opcode(opcode = 0xc1, extension = 0x7, name = sar, type = arithmetic) = 1, Opcode(opcode = 0x83, extension = 0x0, name = add, type = arithmetic) = 2, Opcode(opcode = 0x2d, name = sub, type = arithmetic) = 1, Opcode(opcode = 0x3, name = add, type = arithmetic) = 0, Opcode(opcode = 0x29, name = sub, type = arithmetic) = 0, Opcode(opcode = 0x83, extension = 0x7, name = cmp, type = arithmetic) = 1, Opcode(opcode = 0x1, name = add, type = arithmetic) = 0, Opcode(opcode = 0x83, extension = 0x4, name = and, type = arithmetic) = 0, Opcode(opcode = 0xd1, extension = 0x7, name = sar, type = arithmetic) = 0, Opcode(opcode = 0x85, name = test, type = arithmetic) = 3, Opcode(opcode = 0x39, name = cmp, type = arithmetic) = 0, Opcode(opcode = 0x80, extension = 0x7, name = cmp, type = arithmetic) = 0, Opcode(opcode = 0x83, extension = 0x5, name = sub, type = arithmetic) = 1, }
  2 logic      = {Opcode(opcode = 0x31, name = xor, type = logic) = 1, Opcode(opcode = 0xc1, extension = 0x5, name = shr, type = logic) = 0, }
  3 misc       = {Opcode(opcode = 0xf4, name = hlt, type = misc) = 0, Opcode(opcode = 0xf1f, extension = 0x0, name = data32 data32 data32 nop, type = misc) = 0, Opcode(opcode = 0x8d, name = lea, type = misc) = 1, Opcode(opcode = 0x90, name = nop, type = misc) = 0, Opcode(opcode = 0xf1f, extension = 0x0, name = data32 nop, type = misc) = 0, Opcode(opcode = 0xf1f, extension = 0x0, name = nop, type = misc) = 7, }
  4 jump       = {Opcode(opcode = 0xc3, name = ret, type = jump) = 4, Opcode(opcode = 0x75, name = jne, type = jump) = 2, Opcode(opcode = 0xc3, name = rep ret, type = jump) = 1, Opcode(opcode = 0x77, name = ja, type = jump) = 0, Opcode(opcode = 0xe9, name = jmp, type = jump) = 1, Opcode(opcode = 0x74, name = je, type = jump) = 4, Opcode(opcode = 0xff, extension = 0x2, name = call, type = jump) = 1, Opcode(opcode = 0xe8, name = call, type = jump) = 5, Opcode(opcode = 0xff, extension = 0x4, name = jmp, type = jump) = 1, }

Total unique opcodes compared to actual opcodes
  0 transfer   = (100, 8)
  1 arithmetic = (100, 13)
  2 logic      = (100, 2)
  3 misc       = (100, 6)
  4 jump       = (100, 9)

Total operands: 208
Counts
  0 immediate                                 = 52
  1 register                                  = 127
  2 [register]                                = 2
  3 [immediate]                               = 0
  4 [register + immediate]                    = 21
  5 [register * scale]                        = 0
  6 [register + register * scale]             = 1
  7 [register * scale + immediate]            = 0
  8 [register + register * scale + immediate] = 5

Percentages
  0 immediate                                 =  25.00%
  1 register                                  =  61.06%
  2 [register]                                =   0.96%
  3 [immediate]                               =   0.00%
  4 [register + immediate]                    =  10.10%
  5 [register * scale]                        =   0.00%
  6 [register + register * scale]             =   0.48%
  7 [register * scale + immediate]            =   0.00%
  8 [register + register * scale + immediate] =   2.40%

Operand types by opcode types
           | immediate | register | [register] | [immediate] | [register + immediate] | [register * scale] | [register + register * scale] | [register * scale + immediate] | [register + register * scale + immediate] | Total
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
transfer   | 20        | 90       | 0          | 0           | 13                     | 0                  | 0                             | 0                              | 0                                         | 123  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
arithmetic | 14        | 27       | 0          | 0           | 3                      | 0                  | 0                             | 0                              | 0                                         | 44   
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
logic      | 1         | 5        | 0          | 0           | 0                      | 0                  | 0                             | 0                              | 0                                         | 6    
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
misc       | 0         | 2        | 2          | 0           | 5                      | 0                  | 0                             | 0                              | 5                                         | 14   
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
jump       | 17        | 3        | 0          | 0           | 0                      | 0                  | 1                             | 0                              | 0                                         | 21   
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
Total      | 52        | 127      | 2          | 0           | 21                     | 0                  | 1                             | 0                              | 5                                         | 208  

Operand types by opcode types as percentage of total operands
           | immediate | register | [register] | [immediate] | [register + immediate] | [register * scale] | [register + register * scale] | [register * scale + immediate] | [register + register * scale + immediate] | Total  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
transfer   |   9.62%   |  43.27%  |   0.00%    |   0.00%     |   6.25%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   |  59.13%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
arithmetic |   6.73%   |  12.98%  |   0.00%    |   0.00%     |   1.44%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   |  21.15%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
logic      |   0.48%   |   2.40%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   |   2.88%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
misc       |   0.00%   |   0.96%  |   0.96%    |   0.00%     |   2.40%                |   0.00%            |   0.00%                       |   0.00%                        |   2.40%                                   |   6.73%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
jump       |   8.17%   |   1.44%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   0.48%                       |   0.00%                        |   0.00%                                   |  10.10%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
Total      |  25.00%   |  61.06%  |   0.96%    |   0.00%     |  10.10%                |   0.00%            |   0.48%                       |   0.00%                        |   2.40%                                   | 100.00%

Operand types by opcode types as percentage of operand type
           | immediate | register | [register] | [immediate] | [register + immediate] | [register * scale] | [register + register * scale] | [register * scale + immediate] | [register + register * scale + immediate]
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
transfer   |  38.46%   |  70.87%  |   0.00%    |   0.00%     |  61.90%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
arithmetic |  26.92%   |  21.26%  |   0.00%    |   0.00%     |  14.29%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
logic      |   1.92%   |   3.94%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
misc       |   0.00%   |   1.57%  | 100.00%    |   0.00%     |  23.81%                |   0.00%            |   0.00%                       |   0.00%                        | 100.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
jump       |  32.69%   |   2.36%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            | 100.00%                       |   0.00%                        |   0.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
Total      | 100.00%   | 100.00%  | 100.00%    |   0.00%     | 100.00%                |   0.00%            | 100.00%                       |   0.00%                        | 100.00%                                  

Operand types by opcode types as percentage of opcode type
           | immediate | register | [register] | [immediate] | [register + immediate] | [register * scale] | [register + register * scale] | [register * scale + immediate] | [register + register * scale + immediate] | Total  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
transfer   |  16.26%   |  73.17%  |   0.00%    |   0.00%     |  10.57%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   | 100.00%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
arithmetic |  31.82%   |  61.36%  |   0.00%    |   0.00%     |   6.82%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   | 100.00%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
logic      |  16.67%   |  83.33%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   | 100.00%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
misc       |   0.00%   |  14.29%  |  14.29%    |   0.00%     |  35.71%                |   0.00%            |   0.00%                       |   0.00%                        |  35.71%                                   | 100.00%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
jump       |  80.95%   |  14.29%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   4.76%                       |   0.00%                        |   0.00%                                   | 100.00%

Data direction by opcode type
           | no operands | imm | reg | mem | imm -> reg | imm -> mem | reg -> reg | reg -> mem | mem -> reg | mem -> mem | Total
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
transfer   | 0           | 0   | 29  | 0   | 16         | 4          | 18         | 5          | 4          | 0          | 76   
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
arithmetic | 0           | 0   | 0   | 0   | 12         | 2          | 7          | 0          | 1          | 0          | 22   
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
logic      | 0           | 0   | 0   | 0   | 1          | 0          | 2          | 0          | 0          | 0          | 3    
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
misc       | 2           | 0   | 0   | 10  | 0          | 0          | 0          | 0          | 2          | 0          | 14   
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
jump       | 7           | 17  | 3   | 1   | 0          | 0          | 0          | 0          | 0          | 0          | 28   
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
Total      | 9           | 17  | 32  | 11  | 29         | 6          | 27         | 5          | 7          | 0          | 143  