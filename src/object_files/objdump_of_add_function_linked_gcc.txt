ben@ben-XPS-L701X:~/Documents/InstructionSetAnalysis/src/object_files$ objdump -d -M intel add_function_linked_gcc.out 

add_function_linked_gcc.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000400418 <_init>:
  400418:	48 83 ec 08          	sub    rsp,0x8
  40041c:	48 8b 05 d5 0b 20 00 	mov    rax,QWORD PTR [rip+0x200bd5]        # 600ff8 <_DYNAMIC+0x1d0>
  400423:	48 85 c0             	test   rax,rax
  400426:	74 05                	je     40042d <_init+0x15>
  400428:	e8 53 00 00 00       	call   400480 <__gmon_start__@plt>
  40042d:	48 83 c4 08          	add    rsp,0x8
  400431:	c3                   	ret    

Disassembly of section .plt:

0000000000400440 <puts@plt-0x10>:
  400440:	ff 35 c2 0b 20 00    	push   QWORD PTR [rip+0x200bc2]        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400446:	ff 25 c4 0b 20 00    	jmp    QWORD PTR [rip+0x200bc4]        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40044c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000400450 <puts@plt>:
  400450:	ff 25 c2 0b 20 00    	jmp    QWORD PTR [rip+0x200bc2]        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400456:	68 00 00 00 00       	push   0x0
  40045b:	e9 e0 ff ff ff       	jmp    400440 <_init+0x28>

0000000000400460 <printf@plt>:
  400460:	ff 25 ba 0b 20 00    	jmp    QWORD PTR [rip+0x200bba]        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400466:	68 01 00 00 00       	push   0x1
  40046b:	e9 d0 ff ff ff       	jmp    400440 <_init+0x28>

0000000000400470 <__libc_start_main@plt>:
  400470:	ff 25 b2 0b 20 00    	jmp    QWORD PTR [rip+0x200bb2]        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400476:	68 02 00 00 00       	push   0x2
  40047b:	e9 c0 ff ff ff       	jmp    400440 <_init+0x28>

0000000000400480 <__gmon_start__@plt>:
  400480:	ff 25 aa 0b 20 00    	jmp    QWORD PTR [rip+0x200baa]        # 601030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400486:	68 03 00 00 00       	push   0x3
  40048b:	e9 b0 ff ff ff       	jmp    400440 <_init+0x28>

Disassembly of section .text:

0000000000400490 <_start>:
  400490:	31 ed                	xor    ebp,ebp
  400492:	49 89 d1             	mov    r9,rdx
  400495:	5e                   	pop    rsi
  400496:	48 89 e2             	mov    rdx,rsp
  400499:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
  40049d:	50                   	push   rax
  40049e:	54                   	push   rsp
  40049f:	49 c7 c0 50 06 40 00 	mov    r8,0x400650
  4004a6:	48 c7 c1 e0 05 40 00 	mov    rcx,0x4005e0
  4004ad:	48 c7 c7 7d 05 40 00 	mov    rdi,0x40057d
  4004b4:	e8 b7 ff ff ff       	call   400470 <__libc_start_main@plt>
  4004b9:	f4                   	hlt    
  4004ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000004004c0 <deregister_tm_clones>:
  4004c0:	b8 4f 10 60 00       	mov    eax,0x60104f
  4004c5:	55                   	push   rbp
  4004c6:	48 2d 48 10 60 00    	sub    rax,0x601048
  4004cc:	48 83 f8 0e          	cmp    rax,0xe
  4004d0:	48 89 e5             	mov    rbp,rsp
  4004d3:	77 02                	ja     4004d7 <deregister_tm_clones+0x17>
  4004d5:	5d                   	pop    rbp
  4004d6:	c3                   	ret    
  4004d7:	b8 00 00 00 00       	mov    eax,0x0
  4004dc:	48 85 c0             	test   rax,rax
  4004df:	74 f4                	je     4004d5 <deregister_tm_clones+0x15>
  4004e1:	5d                   	pop    rbp
  4004e2:	bf 48 10 60 00       	mov    edi,0x601048
  4004e7:	ff e0                	jmp    rax
  4004e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000004004f0 <register_tm_clones>:
  4004f0:	b8 48 10 60 00       	mov    eax,0x601048
  4004f5:	55                   	push   rbp
  4004f6:	48 2d 48 10 60 00    	sub    rax,0x601048
  4004fc:	48 c1 f8 03          	sar    rax,0x3
  400500:	48 89 e5             	mov    rbp,rsp
  400503:	48 89 c2             	mov    rdx,rax
  400506:	48 c1 ea 3f          	shr    rdx,0x3f
  40050a:	48 01 d0             	add    rax,rdx
  40050d:	48 d1 f8             	sar    rax,1
  400510:	75 02                	jne    400514 <register_tm_clones+0x24>
  400512:	5d                   	pop    rbp
  400513:	c3                   	ret    
  400514:	ba 00 00 00 00       	mov    edx,0x0
  400519:	48 85 d2             	test   rdx,rdx
  40051c:	74 f4                	je     400512 <register_tm_clones+0x22>
  40051e:	5d                   	pop    rbp
  40051f:	48 89 c6             	mov    rsi,rax
  400522:	bf 48 10 60 00       	mov    edi,0x601048
  400527:	ff e2                	jmp    rdx
  400529:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000400530 <__do_global_dtors_aux>:
  400530:	80 3d 11 0b 20 00 00 	cmp    BYTE PTR [rip+0x200b11],0x0        # 601048 <__TMC_END__>
  400537:	75 11                	jne    40054a <__do_global_dtors_aux+0x1a>
  400539:	55                   	push   rbp
  40053a:	48 89 e5             	mov    rbp,rsp
  40053d:	e8 7e ff ff ff       	call   4004c0 <deregister_tm_clones>
  400542:	5d                   	pop    rbp
  400543:	c6 05 fe 0a 20 00 01 	mov    BYTE PTR [rip+0x200afe],0x1        # 601048 <__TMC_END__>
  40054a:	f3 c3                	repz ret 
  40054c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000400550 <frame_dummy>:
  400550:	48 83 3d c8 08 20 00 	cmp    QWORD PTR [rip+0x2008c8],0x0        # 600e20 <__JCR_END__>
  400557:	00 
  400558:	74 1e                	je     400578 <frame_dummy+0x28>
  40055a:	b8 00 00 00 00       	mov    eax,0x0
  40055f:	48 85 c0             	test   rax,rax
  400562:	74 14                	je     400578 <frame_dummy+0x28>
  400564:	55                   	push   rbp
  400565:	bf 20 0e 60 00       	mov    edi,0x600e20
  40056a:	48 89 e5             	mov    rbp,rsp
  40056d:	ff d0                	call   rax
  40056f:	5d                   	pop    rbp
  400570:	e9 7b ff ff ff       	jmp    4004f0 <register_tm_clones>
  400575:	0f 1f 00             	nop    DWORD PTR [rax]
  400578:	e9 73 ff ff ff       	jmp    4004f0 <register_tm_clones>

000000000040057d <main>:
  40057d:	55                   	push   rbp
  40057e:	48 89 e5             	mov    rbp,rsp
  400581:	48 83 ec 10          	sub    rsp,0x10
  400585:	bf 64 06 40 00       	mov    edi,0x400664
  40058a:	e8 c1 fe ff ff       	call   400450 <puts@plt>
  40058f:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [rbp-0xc],0x5
  400596:	c7 45 f8 07 00 00 00 	mov    DWORD PTR [rbp-0x8],0x7
  40059d:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  4005a0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  4005a3:	89 d6                	mov    esi,edx
  4005a5:	89 c7                	mov    edi,eax
  4005a7:	e8 1e 00 00 00       	call   4005ca <add>
  4005ac:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  4005af:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  4005b2:	89 c6                	mov    esi,eax
  4005b4:	bf 71 06 40 00       	mov    edi,0x400671
  4005b9:	b8 00 00 00 00       	mov    eax,0x0
  4005be:	e8 9d fe ff ff       	call   400460 <printf@plt>
  4005c3:	b8 00 00 00 00       	mov    eax,0x0
  4005c8:	c9                   	leave  
  4005c9:	c3                   	ret    

00000000004005ca <add>:
  4005ca:	55                   	push   rbp
  4005cb:	48 89 e5             	mov    rbp,rsp
  4005ce:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  4005d1:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  4005d4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  4005d7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  4005da:	01 d0                	add    eax,edx
  4005dc:	5d                   	pop    rbp
  4005dd:	c3                   	ret    
  4005de:	66 90                	xchg   ax,ax

00000000004005e0 <__libc_csu_init>:
  4005e0:	41 57                	push   r15
  4005e2:	41 89 ff             	mov    r15d,edi
  4005e5:	41 56                	push   r14
  4005e7:	49 89 f6             	mov    r14,rsi
  4005ea:	41 55                	push   r13
  4005ec:	49 89 d5             	mov    r13,rdx
  4005ef:	41 54                	push   r12
  4005f1:	4c 8d 25 18 08 20 00 	lea    r12,[rip+0x200818]        # 600e10 <__frame_dummy_init_array_entry>
  4005f8:	55                   	push   rbp
  4005f9:	48 8d 2d 18 08 20 00 	lea    rbp,[rip+0x200818]        # 600e18 <__init_array_end>
  400600:	53                   	push   rbx
  400601:	4c 29 e5             	sub    rbp,r12
  400604:	31 db                	xor    ebx,ebx
  400606:	48 c1 fd 03          	sar    rbp,0x3
  40060a:	48 83 ec 08          	sub    rsp,0x8
  40060e:	e8 05 fe ff ff       	call   400418 <_init>
  400613:	48 85 ed             	test   rbp,rbp
  400616:	74 1e                	je     400636 <__libc_csu_init+0x56>
  400618:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40061f:	00 
  400620:	4c 89 ea             	mov    rdx,r13
  400623:	4c 89 f6             	mov    rsi,r14
  400626:	44 89 ff             	mov    edi,r15d
  400629:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
  40062d:	48 83 c3 01          	add    rbx,0x1
  400631:	48 39 eb             	cmp    rbx,rbp
  400634:	75 ea                	jne    400620 <__libc_csu_init+0x40>
  400636:	48 83 c4 08          	add    rsp,0x8
  40063a:	5b                   	pop    rbx
  40063b:	5d                   	pop    rbp
  40063c:	41 5c                	pop    r12
  40063e:	41 5d                	pop    r13
  400640:	41 5e                	pop    r14
  400642:	41 5f                	pop    r15
  400644:	c3                   	ret    
  400645:	66 66 2e 0f 1f 84 00 	data32 nop WORD PTR cs:[rax+rax*1+0x0]
  40064c:	00 00 00 00 

0000000000400650 <__libc_csu_fini>:
  400650:	f3 c3                	repz ret 

Disassembly of section .fini:

0000000000400654 <_fini>:
  400654:	48 83 ec 08          	sub    rsp,0x8
  400658:	48 83 c4 08          	add    rsp,0x8
  40065c:	c3                   	ret


Calculating stats
Filename:    object_files/add_function_linked_gcc.out
Architecture:    x86
Compiler:    gcc
Total instructions:  137

Opcode types
   0 transfer
   1 arithmetic
   2 logic
   3 misc
   4 jump

Total unique opcodes 500
Total actual opcodes by type
   0 transfer    100
   1 arithmetic    100
   2 logic   100
   3 misc    100
   4 jump    100

Operand types
   0 immediate
   1 register
   2 [register]
   3 [immediate]
   4 [register + immediate]
   5 [register * scale]
   6 [register + register * scale]
   7 [register * scale + immediate]
   8 [register + register * scale + immediate]

Data directions
   0 no operands
   1 imm
   2 reg
   3 mem
   4 imm -> reg
   5 imm -> mem
   6 reg -> reg
   7 reg -> mem
   8 mem -> reg
   9 mem -> mem

Total opcodes: 137
Counts
  0 transfer   = 73
  1 arithmetic = 21
  2 logic      = 3
  3 misc       = 11
  4 jump       = 29

Percentages
  0 transfer   =  53.28%
  1 arithmetic =  15.33%
  2 logic      =   2.19%
  3 misc       =   8.03%
  4 jump       =  21.17%

Total unique opcodes 36
Counts
  0 transfer   = {Opcode(opcode = 0x58, name = pop, type = transfer) = 13, Opcode(opcode = 0x89, name = mov, type = transfer) = 21, Opcode(opcode = 0x50, name = push, type = transfer) = 13, Opcode(opcode = 0xc6, extension = 0x0, name = mov, type = transfer) = 0, Opcode(opcode = 0x8b, name = mov, type = transfer) = 4, Opcode(opcode = 0xb8, name = mov, type = transfer) = 11, Opcode(opcode = 0xc7, extension = 0x0, name = mov, type = transfer) = 4, }
  1 arithmetic = {Opcode(opcode = 0xc1, extension = 0x7, name = sar, type = arithmetic) = 1, Opcode(opcode = 0x29, name = sub, type = arithmetic) = 0, Opcode(opcode = 0x2d, name = sub, type = arithmetic) = 1, Opcode(opcode = 0x83, extension = 0x7, name = cmp, type = arithmetic) = 1, Opcode(opcode = 0x1, name = add, type = arithmetic) = 1, Opcode(opcode = 0x83, extension = 0x4, name = and, type = arithmetic) = 0, Opcode(opcode = 0xd1, extension = 0x7, name = sar, type = arithmetic) = 0, Opcode(opcode = 0x85, name = test, type = arithmetic) = 3, Opcode(opcode = 0x39, name = cmp, type = arithmetic) = 0, Opcode(opcode = 0x80, extension = 0x7, name = cmp, type = arithmetic) = 0, Opcode(opcode = 0x83, extension = 0x5, name = sub, type = arithmetic) = 1, Opcode(opcode = 0x83, extension = 0x0, name = add, type = arithmetic) = 1, }
  2 logic      = {Opcode(opcode = 0x31, name = xor, type = logic) = 1, Opcode(opcode = 0xc1, extension = 0x5, name = shr, type = logic) = 0, }
  3 misc       = {Opcode(opcode = 0xf4, name = hlt, type = misc) = 0, Opcode(opcode = 0x90, name = nop, type = misc) = 0, Opcode(opcode = 0xf1f, extension = 0x0, name = nop, type = misc) = 5, Opcode(opcode = 0xf1f, extension = 0x0, name = data32 nop, type = misc) = 0, Opcode(opcode = 0x8d, name = lea, type = misc) = 1, }
  4 jump       = {Opcode(opcode = 0xc3, name = ret, type = jump) = 4, Opcode(opcode = 0x75, name = jne, type = jump) = 2, Opcode(opcode = 0xc9, name = leave, type = jump) = 0, Opcode(opcode = 0xc3, name = rep ret, type = jump) = 1, Opcode(opcode = 0x77, name = ja, type = jump) = 0, Opcode(opcode = 0xe9, name = jmp, type = jump) = 1, Opcode(opcode = 0x74, name = je, type = jump) = 4, Opcode(opcode = 0xff, extension = 0x2, name = call, type = jump) = 1, Opcode(opcode = 0xe8, name = call, type = jump) = 5, Opcode(opcode = 0xff, extension = 0x4, name = jmp, type = jump) = 1, }

Total unique opcodes compared to actual opcodes
  0 transfer   = (100, 7)
  1 arithmetic = (100, 12)
  2 logic      = (100, 2)
  3 misc       = (100, 5)
  4 jump       = (100, 10)

Total operands: 198
Counts
  0 immediate                                 = 49
  1 register                                  = 126
  2 [register]                                = 1
  3 [immediate]                               = 0
  4 [register + immediate]                    = 18
  5 [register * scale]                        = 0
  6 [register + register * scale]             = 1
  7 [register * scale + immediate]            = 0
  8 [register + register * scale + immediate] = 3

Percentages
  0 immediate                                 =  24.75%
  1 register                                  =  63.64%
  2 [register]                                =   0.51%
  3 [immediate]                               =   0.00%
  4 [register + immediate]                    =   9.09%
  5 [register * scale]                        =   0.00%
  6 [register + register * scale]             =   0.51%
  7 [register * scale + immediate]            =   0.00%
  8 [register + register * scale + immediate] =   1.52%

Operand types by opcode types
           | immediate | register | [register] | [immediate] | [register + immediate] | [register * scale] | [register + register * scale] | [register * scale + immediate] | [register + register * scale + immediate] | Total
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
transfer   | 18        | 89       | 0          | 0           | 11                     | 0                  | 0                             | 0                              | 0                                         | 118  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
arithmetic | 13        | 27       | 0          | 0           | 2                      | 0                  | 0                             | 0                              | 0                                         | 42   
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
logic      | 1         | 5        | 0          | 0           | 0                      | 0                  | 0                             | 0                              | 0                                         | 6    
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
misc       | 0         | 2        | 1          | 0           | 5                      | 0                  | 0                             | 0                              | 3                                         | 11   
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
jump       | 17        | 3        | 0          | 0           | 0                      | 0                  | 1                             | 0                              | 0                                         | 21   
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+------
Total      | 49        | 126      | 1          | 0           | 18                     | 0                  | 1                             | 0                              | 3                                         | 198  

Operand types by opcode types as percentage of total operands
           | immediate | register | [register] | [immediate] | [register + immediate] | [register * scale] | [register + register * scale] | [register * scale + immediate] | [register + register * scale + immediate] | Total  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
transfer   |   9.09%   |  44.95%  |   0.00%    |   0.00%     |   5.56%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   |  59.60%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
arithmetic |   6.57%   |  13.64%  |   0.00%    |   0.00%     |   1.01%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   |  21.21%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
logic      |   0.51%   |   2.53%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   |   3.03%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
misc       |   0.00%   |   1.01%  |   0.51%    |   0.00%     |   2.53%                |   0.00%            |   0.00%                       |   0.00%                        |   1.52%                                   |   5.56%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
jump       |   8.59%   |   1.52%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   0.51%                       |   0.00%                        |   0.00%                                   |  10.61%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
Total      |  24.75%   |  63.64%  |   0.51%    |   0.00%     |   9.09%                |   0.00%            |   0.51%                       |   0.00%                        |   1.52%                                   | 100.00%

Operand types by opcode types as percentage of operand type
           | immediate | register | [register] | [immediate] | [register + immediate] | [register * scale] | [register + register * scale] | [register * scale + immediate] | [register + register * scale + immediate]
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
transfer   |  36.73%   |  70.63%  |   0.00%    |   0.00%     |  61.11%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
arithmetic |  26.53%   |  21.43%  |   0.00%    |   0.00%     |  11.11%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
logic      |   2.04%   |   3.97%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
misc       |   0.00%   |   1.59%  | 100.00%    |   0.00%     |  27.78%                |   0.00%            |   0.00%                       |   0.00%                        | 100.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
jump       |  34.69%   |   2.38%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            | 100.00%                       |   0.00%                        |   0.00%                                  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+------------------------------------------
Total      | 100.00%   | 100.00%  | 100.00%    |   0.00%     | 100.00%                |   0.00%            | 100.00%                       |   0.00%                        | 100.00%                                  

Operand types by opcode types as percentage of opcode type
           | immediate | register | [register] | [immediate] | [register + immediate] | [register * scale] | [register + register * scale] | [register * scale + immediate] | [register + register * scale + immediate] | Total  
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
transfer   |  15.25%   |  75.42%  |   0.00%    |   0.00%     |   9.32%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   | 100.00%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
arithmetic |  30.95%   |  64.29%  |   0.00%    |   0.00%     |   4.76%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   | 100.00%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
logic      |  16.67%   |  83.33%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   0.00%                       |   0.00%                        |   0.00%                                   | 100.00%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
misc       |   0.00%   |  18.18%  |   9.09%    |   0.00%     |  45.45%                |   0.00%            |   0.00%                       |   0.00%                        |  27.27%                                   | 100.00%
-----------+-----------+----------+------------+-------------+------------------------+--------------------+-------------------------------+--------------------------------+-------------------------------------------+--------
jump       |  80.95%   |  14.29%  |   0.00%    |   0.00%     |   0.00%                |   0.00%            |   4.76%                       |   0.00%                        |   0.00%                                   | 100.00%

Data direction by opcode type
           | no operands | imm | reg | mem | imm -> reg | imm -> mem | reg -> reg | reg -> mem | mem -> reg | mem -> mem | Total
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
transfer   | 0           | 0   | 28  | 0   | 15         | 3          | 19         | 3          | 5          | 0          | 73   
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
arithmetic | 0           | 0   | 0   | 0   | 11         | 2          | 8          | 0          | 0          | 0          | 21   
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
logic      | 0           | 0   | 0   | 0   | 1          | 0          | 2          | 0          | 0          | 0          | 3    
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
misc       | 2           | 0   | 0   | 7   | 0          | 0          | 0          | 0          | 2          | 0          | 11   
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
jump       | 8           | 17  | 3   | 1   | 0          | 0          | 0          | 0          | 0          | 0          | 29   
-----------+-------------+-----+-----+-----+------------+------------+------------+------------+------------+------------+------
Total      | 10          | 17  | 31  | 8   | 27         | 5          | 29         | 3          | 7          | 0          | 137  